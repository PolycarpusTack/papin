name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
      
      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - name: Install frontend dependencies
        working-directory: ./src-frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: ./src-frontend
        run: npm run build
      
      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib
      
      - name: Run integration tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --test '*'

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      
      - name: Run benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: --features benchmarking -- --output-format bencher | tee benchmark-results.txt
      
      - name: Store benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.txt

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - name: Install frontend dependencies
        working-directory: ./src-frontend
        run: npm ci
      
      - name: Install Playwright
        working-directory: ./src-frontend
        run: npx playwright install --with-deps
      
      - name: Build app for E2E tests
        run: |
          cargo build
          npm run build:tauri
      
      - name: Run E2E tests
        working-directory: ./src-frontend
        run: npm run test:e2e
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: ./src-frontend/playwright-report/
          retention-days: 30

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [lint, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
            artifact_name: linux
            asset_name: mcp-client-x86_64-linux
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            artifact_name: windows
            asset_name: mcp-client-x86_64-windows
          - os: macos-latest
            rust_target: x86_64-apple-darwin
            artifact_name: macos
            asset_name: mcp-client-x86_64-macos
    
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.rust_target }}
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - name: Install frontend dependencies
        working-directory: ./src-frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: ./src-frontend
        run: npm run build
      
      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: bash ./installers/linux-build.sh
      
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: powershell -File ./installers/windows-build.ps1
      
      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: bash ./installers/macos-build.sh
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ./installers/${{ matrix.artifact_name }}/
            ./dist/${{ matrix.asset_name }}
          retention-days: 7